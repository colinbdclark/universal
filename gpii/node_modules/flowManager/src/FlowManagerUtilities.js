/**
 GPII Flow Manager Utilities.

 Copyright 2012 OCAD University

 Licensed under the New BSD license. You may not use this file except in
 compliance with this License.

 You may obtain a copy of the License at
 https://github.com/gpii/universal/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    request.log = function (msg, data) {
        data = data || "";
        data = fluid.isPrimitive(data) ? data : fluid.prettyPrintJSON(data, {
            indent: 2
        });

        fluid.log(fluid.logLevel.IMPORTANT, "\n", msg, data,  "\n\n--------------------\n");
    };

    request.logAndNotify = function (msg, event, callback) {
        return function (data) {
            request.log(msg, data);
            event.fire(callback ? callback(data) : data);
        };
    };

    request.getPreferences = function (preferencesDataSource, event, token) {
        var prefsServerURL = preferencesDataSource.urlResolver.resolve({
            token: token
        });
        request.log("Requesting an N&P set from the Preferences Server at:\n     ", prefsServerURL);

        preferencesDataSource.get({
            token: token
        }, request.logAndNotify("The Preferences Server responded with:\n", event,
            function getPreferences(data) {
                return data.preferences || data;
            }));
    };

    request.getDevice = function (deviceReporterDataSource, event) {
        var deviceReporterURL = deviceReporterDataSource.urlResolver.resolve();
        request.log("Requesting device information from the Device Reporter at:\n     ", deviceReporterURL);

        deviceReporterDataSource.get(null, request.logAndNotify(
            "The Device Reporter responded with:\n", event));
    };

    request.getMatch = function (matchMakerDataSource, event, preferences, device) {
        var matchMakerURL = matchMakerDataSource.urlResolver.resolve();
        request.log("Requesting a match from the Matchmaker Server at:\n     ", matchMakerURL);
        matchMakerDataSource.set(null, {
            preferences: preferences,
            device: device
        }, request.logAndNotify(
            "The Matchmaker returned a payload containing device-specific settings:\n", event));
    };

    fluid.defaults("gpii.request.flowManager.token", {
        gradeNames: ["fluid.eventedComponent", "autoInit"],
        invokers: {
            getPreferences: {
                funcName: "gpii.request.flowManager.getPreferences",
                args: ["{flowManager}.preferencesDataSource", "{that}.events.onPreferences", "{that}.userToken"]
            },
            getMatch: {
                funcName: "gpii.request.flowManager.getMatch",
                args: ["{flowManager}.matchMakerDataSource", "{that}.events.onMatch", "{arguments}.0", "{arguments}.1"]
            }
        },
        events: {
            onUserListener: null,
            onPreferences: null,
            onReadyToMatch: null,
            onMatch: null
        },
        listeners: {
            onUserListener: "{that}.getPreferences",
            onReadyToMatch: [
                {
                    funcName: "gpii.request.flowManager.log",
                    args: ["The Flow Manager's onReadyToMatch event fired. We're ready to invoke the matchmaking process."]
                },
                "{that}.getMatch"
            ]
        }
    });

})();
